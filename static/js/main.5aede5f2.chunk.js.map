{"version":3,"sources":["TodoCreateForm.js","ToDoListItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoCreateForm","props","useState","inputValue","setInputValue","className","type","class","disabled","value","onChange","e","target","console","log","onClick","create","ToDoListItem","isEditMode","setIsEditMode","todo","markAsDone","markDoAgain","remove","todoUpdate","moveUpButton","moveDownButton","index","listLength","isToDoDone","done","toDoTitle","title","toDoId","id","titleStyle","textDecoration","listStyleType","newToDo","setNewToDo","style","TodoList","list","length","role","map","el","key","initialList","App","setList","newItem","Math","random","updatedList","newList","filter","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5aede5f2.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction TodoCreateForm(props){\n\n    const [inputValue,setInputValue] = useState(222);\n\n    const inputOnChange = e => {setInputValue(e.target.value)\n    console.log(e.target)\n    };\n\n    const onCreate = () => {\n        props.create(inputValue);\n        setInputValue(' ')\n\n        }\n\n  return (\n\n    <div className=\"App\">\n\n        <button type=\"button\" class=\"btn btn-md btn-primary ml-2 mr-2\" disabled>Add noted</button>\n\n        <input value={inputValue} onChange={inputOnChange}/>\n\n        <button class=\"btn btn-primary ml-2 mr-2\" onClick={onCreate}> Create </button>\n\n    </div>\n  );\n}\n\nexport default TodoCreateForm;\n","import React, {useState} from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nfunction ToDoListItem(props) {\n    const [isEditMode, setIsEditMode] = useState(false) //контролирует состояние элемента\n\n    const {todo,\n        markAsDone,\n        markDoAgain,\n        remove,\n        todoUpdate,\n        moveUpButton,\n        moveDownButton,\n        index,\n        listLength} = props //принимает props от родителя\n\n    const isToDoDone = todo.done\n    const toDoTitle = todo.title\n    const toDoId = todo.id\n\n\n\n    const titleStyle = isToDoDone === true ?\n        {textDecoration: \"line-through\", listStyleType: \"none\"} :\n        {listStyleType: \"none\"}\n\n    const [newToDo, setNewToDo] = useState(toDoTitle)//создан новый стэйт который обновляет данные в каждой задаче - дает\n\n    const inputHandler = (e) => {\n        setNewToDo(e.target.value)\n\n    }\n    const saveButtonHandler = () => {\n        todoUpdate(toDoId,newToDo)\n        setIsEditMode(false)\n    }\n\n\n    return (\n        <div className=\"list-group-item\">\n        <div>\n            {isEditMode ? (\n                <div>\n                    <input onChange={inputHandler} value={newToDo}/>\n                <button type=\"button\" class=\"btn btn-info ml-2 mr-2\" onClick={saveButtonHandler}>Save</button>\n                </div>\n            ) : (\n                <div>\n                    {isToDoDone ? (\n                        <li style={titleStyle}>\n                            {toDoTitle}\n                            <button type=\"button\" class=\"btn btn-success ml-2 mr-2\" onClick={() => markDoAgain(toDoId)}> Do again </button>\n                            <button type=\"button\" class=\"btn btn-danger ml-2 mr-2\" onClick={() => remove(toDoId)}> X </button>\n                            <button type=\"button\" class=\"btn btn-warning ml-2 mr-2\" onClick={() => setIsEditMode(true)}> Edit </button>\n                        </li>\n                    ) : (\n                        <li style={titleStyle}>\n                            {toDoTitle}\n                            <button type=\"button\" class=\"btn btn-outline-primary ml-2 mr-2\" onClick={() => markAsDone(toDoId)}> Mark as Done </button>\n                            <button type=\"button\" class=\"btn btn-danger ml-2 mr-2\" onClick={() => remove(toDoId)}> X </button>\n                            <button type=\"button\" class=\"btn btn-warning ml-2 mr-2\" onClick={() => setIsEditMode(true)}> Edit </button>\n\n                            {index !== listLength -1 && <button type=\"button\" class=\"btn btn-success ml-2 mr-2\" onClick={() => moveDownButton(index)}>Move Down</button>}\n                            {index !== 0 && <button type=\"button\" class=\"btn btn-success ml-2 mr-2\" onClick={() => moveUpButton(index)}>Move Up</button>}\n                        </li>)\n                    }\n\n                </div>\n            ) }\n\n\n        </div>\n        </div>)\n\n}\n\n\nexport default ToDoListItem;\n","import React from 'react';\nimport './App.css';\nimport ToDoListItem from \"./ToDoListItem\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction TodoList(props) {\n\n    const {markAsDone,markDoAgain, list, remove, todoUpdate, moveUpButton, moveDownButton} = props\n    const listLength= list.length;\n        return (\n    <div>\n        <h3 class=\"alert alert-primary\" role=\"alert\">To do List</h3>\n       {list.map((el,index) => <ToDoListItem\n           todo={el}\n           key={el.id}\n           markAsDone={markAsDone}\n           markDoAgain={markDoAgain}\n           remove={remove}\n           todoUpdate={todoUpdate}\n           moveUpButton={moveUpButton}\n           moveDownButton={moveDownButton}\n           index={index}\n           listLength={listLength}\n\n       />)}\n\n    </div>\n    )\n}\n\nexport default TodoList;\n","import React, {useState} from 'react';\n// import {useDrag} from 'react-dnd';\n//import {useDrop} from 'react-dnd';\n// import {ItemTypes} from './Constants';\nimport './App.css';\nimport TodoCreateForm from \"./TodoCreateForm\";\nimport TodoList from \"./TodoList\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nconst initialList = [\n  {id: 1, title: \"First task: \", done: false},\n  {id: 2, title: \"Second task: \", done: false},\n  {id: 3, title: \"Third task: \", done: false}]\n\nfunction App() {\n\n  const [list, setList] = useState(initialList)\n\n  const create = title => {\n    console.log(title)\n      const newItem = {\n        id: Math.random()*10,\n          title,\n          done: false,\n\n      }\n      const updatedList = [...list,newItem];\n    setList(updatedList);\n  }\n\n  const markAsDone = (toDoId) => {\n    const newList = [...list].map(el => {\n      if(el.id === toDoId) return {...el, done: true}\n        return el\n   })\n  setList(newList)\n  }\n  const markDoAgain = (toDoId) => {\n    const newList = [...list].map(el => {\n      if(el.id === toDoId) return {...el, done: false}\n      return el\n    })\n    setList(newList)\n  }\n  const remove = (toDoId) => {\n    const newItem = [...list].filter(el => el.id !== toDoId)\n    setList(newItem)\n  }\n  const todoUpdate = (toDoId, newToDo) =>{          //сделали новую функцию которая принимает два аргумента\n    const updatedList = [...list].map(el => {     //newToDo - содержит значение которое мы введем в input\n      if(el.id === toDoId) return {...el, title: newToDo}//toDoId - содержит id элемента.\n      return el                               // Проходимся map по элементу и создаем новый элемент с данными старого\n      })\n    setList(updatedList)\n  }\n\n  const moveUpButton = (index) => {\n    if(index !== 0) {\n      let newList = [...list]\n      newList.splice(index - 1, 0, newList.splice(index, 1)[0]);\n      setList(newList)\n    }\n  }\n\n  const moveDownButton = (index) => {\n    let newList = [...list]\n    newList.splice(index + 1, 0, newList.splice(index, 1)[0]);\n    setList(newList)\n    console.log(newList)\n  }\n\n  // function moveArrayItemToNewIndex(arr, old_index, new_index) {\n  //   if (new_index >= arr.length) {\n  //     var k = new_index - arr.length + 1;\n  //     while (k--) {\n  //       arr.push(undefined);\n  //     }\n  //   }\n  //   arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n  //   return arr;\n  // };\n\n\n  return (\n      <div className=\"App\">\n        <div className=\"list-group-item\">\n        <TodoCreateForm create={create}/>\n\n        <TodoList markAsDone={markAsDone}\n                  markDoAgain={markDoAgain}\n                  list={list}\n                  remove={remove}\n                  todoUpdate={todoUpdate}\n                  moveUpButton={moveUpButton}\n                  moveDownButton={moveDownButton}\n        />\n        </div>\n      </div>\n\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}